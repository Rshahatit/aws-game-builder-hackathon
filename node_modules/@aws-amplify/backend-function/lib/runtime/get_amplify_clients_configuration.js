import { NamingConverter } from '@aws-amplify/platform-core';
import { GetObjectCommand, NoSuchKey, S3Client, S3ServiceException, } from '@aws-sdk/client-s3';
const dataKeyNameContent = '_MODEL_INTROSPECTION_SCHEMA_KEY';
const dataBucketNameContent = '_MODEL_INTROSPECTION_SCHEMA_BUCKET_NAME';
const dataEndpointNameContent = '_GRAPHQL_ENDPOINT';
/* eslint-enable @typescript-eslint/naming-convention */
const getResourceConfig = (env, modelIntrospectionSchema) => {
    return {
        API: {
            GraphQL: {
                endpoint: env.dataEndpoint,
                region: env.AWS_REGION,
                defaultAuthMode: 'iam',
                modelIntrospection: modelIntrospectionSchema,
            },
        },
    };
};
const getLibraryOptions = (env) => {
    return {
        Auth: {
            credentialsProvider: {
                getCredentialsAndIdentityId: async () => ({
                    credentials: {
                        accessKeyId: env.AWS_ACCESS_KEY_ID,
                        secretAccessKey: env.AWS_SECRET_ACCESS_KEY,
                        sessionToken: env.AWS_SESSION_TOKEN,
                    },
                }),
                clearCredentialsAndIdentityId: () => {
                    /* noop */
                },
            },
        },
    };
};
const extendEnv = (env, dataName) => {
    const bucketName = `${dataName}${dataBucketNameContent}`;
    const keyName = `${dataName}${dataKeyNameContent}`;
    const endpointName = `${dataName}${dataEndpointNameContent}`;
    if (!(bucketName in env &&
        keyName in env &&
        endpointName in env &&
        typeof env[bucketName] === 'string' &&
        typeof env[keyName] === 'string' &&
        typeof env[endpointName] === 'string')) {
        throw new Error(`The data environment variables are malformed. env=${JSON.stringify(env)}`);
    }
    const dataBucket = env[bucketName];
    const dataKey = env[keyName];
    const dataEndpoint = env[endpointName];
    return {
        ...env,
        dataBucket,
        dataKey,
        dataEndpoint,
    };
};
/**
 * Generate the `resourceConfig` and `libraryOptions` need to configure
 * Amplify for the data client in a lambda.
 *
 * Your function needs to be granted resource access on your schema for this to work
 * `a.schema(...).authorization((allow) => [a.resource(myFunction)])`
 * @param env - The environment variables for the data client
 * @returns An object containing the `resourceConfig` and `libraryOptions`
 */
export const getAmplifyDataClientConfig = async (env, s3Client) => {
    if (!s3Client) {
        s3Client = new S3Client();
    }
    const dataName = new NamingConverter().toScreamingSnakeCase(env.AMPLIFY_DATA_DEFAULT_NAME);
    const extendedEnv = extendEnv(env, dataName);
    let modelIntrospectionSchema;
    try {
        const response = await s3Client.send(new GetObjectCommand({
            Bucket: extendedEnv.dataBucket,
            Key: extendedEnv.dataKey,
        }));
        const modelIntrospectionSchemaJson = await response.Body?.transformToString();
        modelIntrospectionSchema = JSON.parse(modelIntrospectionSchemaJson ?? '{}');
    }
    catch (caught) {
        if (caught instanceof NoSuchKey) {
            throw new Error('Error retrieving the schema from S3. Please confirm that your project has a `defineData` included in the `defineBackend` definition.');
        }
        else if (caught instanceof S3ServiceException) {
            throw new Error(`Error retrieving the schema from S3. You may need to grant this function authorization on the schema. ${caught.name}: ${caught.message}.`);
        }
        else {
            throw caught;
        }
    }
    const libraryOptions = getLibraryOptions(env);
    const resourceConfig = getResourceConfig(extendedEnv, modelIntrospectionSchema);
    return { resourceConfig, libraryOptions };
};
//# sourceMappingURL=data:application/json;base64,